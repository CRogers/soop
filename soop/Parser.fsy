%{

open Tree

%}

%token<string> IDENT BADTOK
%token         NAMESPACE CLASS INTERFACE DEF EOF
%token         IF ELSE FOR IN WHILE SWITCH CASE RETURN
%token         PUBLIC PRIVATE PROTECTED
%token         LPAR RPAR LCURLY RCURLY LSQUARE RSQUARE
%token         DQUOTE SQUOTE COLON SEMI COMMA DOT EQUALS
%token         PLUS MINUS TIMES DIVIDE
%token         LT GT

%token<int>    INT


%type<program> program
%start program


%left  LT GT
%left  PLUS MINUS
%left  TIMES DIVIDE

%%

program: namespaceDecls EOF                                  { Program $1 }

namespaceDecls:
	| /* empty */                                            { [] }
	| namespaceDecl namespaceDecls                           { $1 :: $2 }

namespaceDecl:
	| NAMESPACE longIdent LCURLY classInterfaceDecls RCURLY  { Namespace ($2, $4) }

classInterfaceDecls:
	| /* empty */                                            { [] }
	| classInterfaceDecl classInterfaceDecls                 { $1 :: $2 }

classInterfaceDecl:
	| CLASS IDENT LCURLY classBody RCURLY                    { Class ($2, $4)  }
	/*| INTERFACE IDENT LCURLY interfaceBody RCURLY            { Interface }*/

classBody:
	| /* empty */                                            { [] }
	| localVarDecl classBody                                 { $1 :: $2 }
	| methodDecl classBody                                   { $1 :: $2 }
	| constructorDecl classBody                              { $1 :: $2 }

localVarDecl:
	| accessModifer IDENT COLON longIdent EQUALS expr SEMI   { LocalVar ($2, $1, $4, $6) }

methodDecl:
	| accessModifer DEF IDENT LPAR argList RPAR COLON longIdent block { Method ($3, $1, $5, $8, $9) }

constructorDecl:
	| accessModifer IDENT LPAR argList RPAR block            { Constructor ($1, $4, $6) }

argList:
	| /* empty */                                            { [] }
	| arg                                                    { [$1] }
	| arg COMMA argList                                      { $1 :: $3 }

arg:
	| IDENT COLON longIdent                                  { Arg ($1, $3) }

accessModifer:
	| PUBLIC                                                 { Public }
	| PRIVATE                                                { Private }
	| PROTECTED                                              { Protected }


block:
	| stmt                                                   { [$1] }
	| LCURLY stmts RCURLY                                    { $2 }

stmts:
	| /* empty */                                            { [] }
	| stmt stmts                                             { $1 :: $2 }

stmt:
	| IDENT COLON longIdent EQUALS expr SEMI                 { NewAssign ($3, $1, $5) } 
	| longIdent EQUALS expr SEMI                             { Assign ($1, $3) }
	| IF expr block                                          { If ($2, $3, []) }
	| IF expr block ELSE block                               { If ($2, $3, $5) }
	| WHILE expr block                                       { While ($2, $3) }
	| expr SEMI                                              { DoExpr $1 }


expr:
	| INT                                                    { Int $1 }
	| expr LT expr                                           { Binop (LessThan, $1, $3) }
	| expr GT expr                                           { Binop (GreaterThan, $1, $3) }
	| expr PLUS expr                                         { Binop (Plus, $1, $3) }
	| expr MINUS expr                                        { Binop (Minus, $1, $3) }
	| expr TIMES expr                                        { Binop (Times, $1, $3) }
	| expr DIVIDE expr                                       { Binop (Divide, $1, $3) }
	| LPAR expr RPAR                                         { $2 }
	| longIdent                                              { Var $1 }
	| longIdent LPAR argCallList RPAR                        { MethodCall (Var $1, $3) }
	| expr DOT IDENT LPAR argCallList RPAR                   { MethodCall ($1, $5) }


argCallList:
	| /* empty */                                            { [] }
	| expr                                                   { [$1] }
	| expr COMMA argCallList                                 { $1 :: $3 }


longIdent:
	| IDENT                                                  { $1 }
	| IDENT DOT longIdent                                    { $1 ^ "." ^ $3 }